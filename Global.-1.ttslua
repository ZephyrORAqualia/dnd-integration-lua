--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad()

end

--[[ The onUpdate event is called once per frame. --]]
function onUpdate()
    --[[ print('onUpdate loop!') --]]
end

rollerToggle = true
spellToggle = true
featToggle = true
psionicToggle = true

function toggleSpellButtons(player, value, id)
    if rollerToggle then
        --UI.show("rollerButtons")
        UI.setAttribute("rollerButtons" .. player.color, "active", true)
        UI.setAttribute("rollerLayout" .. player.color , "height", 280)
    else
        --UI.hide("rollerButtons")
        UI.setAttribute("rollerButtons" .. player.color, "active", false)
        UI.setAttribute("spellButton"  .. player.color, "active", false)
        UI.setAttribute("featButton"  .. player.color, "active", false)
        UI.setAttribute("psionicButton" .. player.color, "active", false)
        UI.setAttribute("rollerLayout" .. player.color, "height", 40)
    end
    --This flips between true/false for show/hide
    rollerToggle = not rollerToggle
end

function toggleSpellQuery(player, value, id)
  if spellToggle then
      --UI.show("rollerButtons")
      UI.setAttribute("spellButton"  .. player.color, "active", true)
  else
      --UI.hide("rollerButtons")
      UI.setAttribute("spellButton"  .. player.color, "active", false)
  end
  --This flips between true/false for show/hide
  spellToggle = not spellToggle
end

function toggleFeatQuery(player, value, id)
  if featToggle then
      --UI.show("rollerButtons")
      UI.setAttribute("featButton"  .. player.color, "active", true)
  else
      --UI.hide("rollerButtons")
      UI.setAttribute("featButton"  .. player.color, "active", false)
  end
  --This flips between true/false for show/hide
  featToggle = not featToggle
end

function togglePsionicQuery(player, value, id)
  if psionicToggle then
      --UI.show("rollerButtons")
      UI.setAttribute("psionicButton" .. player.color, "active", true)
  else
      --UI.hide("rollerButtons")
      UI.setAttribute("psionicButton" .. player.color, "active", false)
  end
  --This flips between true/false for show/hide
  psionicToggle = not psionicToggle
end

baseUrl = "https://dnd-backend-main.herokuapp.com/api"

function sendSpellRequest(player, value)
    str = toTitleCase(value)
    if value ~= "" then
      WebRequest.get(baseUrl .. "/get/spell?name=" .. str .. "&page&limit", function(responce)
          local json = JSON.decode(responce.text)
          local result = json.result[1]

          printToAll("\n--" .. player.steam_name .. " Requested spell " .. str .. "--", player.color)
          printToAll("Name: " .. result.name) --display spell name
          printToAll("Level: " .. result.level) -- display spell level

          if result.range[1].distance.type == "touch" then
            printToAll("Range: " .. result.range[1].distance.type) -- display spell range
          else
            printToAll("Range: " .. result.range[1].distance.amount .. " " .. result.range[1].distance.type) -- display spell range
          end

          if result.duration[1].type == "instant" then
            printToAll("Duration: " .. result.duration[1].type)
          else
            printToAll("Duration: " .. result.duration[1].duration.amount .. " " .. result.duration[1].duration.type)
          end

          if result.damageInflict ~= nil then --check if the responce from the server contains a damageInflict value
            for i, v in ipairs(result.damageInflict) do
              printToAll("Damage Type: " .. v) -- display all damage types
            end
          end

          if result.conditionInflict ~= nil then --check if the responce from the server contains a conditionInflict value
            for i, v in ipairs(result.conditionInflict) do
              printToAll("Conditons Inflicted: " .. v) -- display all conditions Inflicted
            end
          end

          if result.savingThrow ~= nil then --check if the responce from the server contains a savingThrow value
            for i, v in ipairs(result.savingThrow) do
              printToAll("Saving Throws: " .. v) -- display all saving throws
            end
          end
          if result.entries ~= nil then --check if the responce from the server contains a entries value
            for i, v in ipairs(result.entries) do -- loop through the entries and if they have a pointless info in them skip it (mainly quotes from custom spells)
              if pcall(result.entries.type ~= nil) then

              else
                  if v.type ~= nil then -- if the entries has a special formatter go below
                    if v.type ~= "table" then -- if the entries has the formatter table
                      for i, a in ipairs(v.entries) do -- loop through all the table entries
                          printToAll(a)
                      end
                    end
                  else
                    printToAll(v) --else just print all the info
                  end
              end
            end
          end

          printToAll("--" .. player.steam_name .. " Requested spell " .. str .. "--", player.color)
        end)
    end
    UI.setAttribute("spellQuery" .. player.color, "text", "") --Put at bottom of function
end

function sendFeatRequest(player, value)
    str = toTitleCase(value) -- normalise the input

    if value ~= "" then -- if input isnt null
      WebRequest.get(baseUrl .. "/get/feat?name=" .. str .. "&page&limit", function(responce)
          local json = JSON.decode(responce.text)--decode responce
          local result = json.result[1] -- make my life easier when referencing data

          printToAll("\n--" .. player.steam_name .. " Requested feat " .. str .. "--", player.color)
          printToAll("Name: " .. result.name) -- get feat name

          printToAll("Description: " .. result.descriptions.description) -- get the description

          for i, v in ipairs(result.descriptions.trait) do -- loop through all entries and print
            printToAll(v)
          end

          printToAll("--" .. player.steam_name .. " Requested feat " .. str .. "--", player.color)
      end)
    end

  UI.setAttribute("featQuery" .. player.color, "text", "") --Put at bottom of function
end

function sendPsionicRequest(player, value)
  str = toTitleCase(value)

  if value ~= "" then
    WebRequest.get(baseUrl .. "/get/psionic?name=" .. str .. "&page&limit", function(responce)
      local json = JSON.decode(responce.text)
      local result = json.result[1]

      printToAll("\n--" .. player.steam_name .. " Requested psionic " .. str .. "--", player.color)

      printToAll("Name: " .. result.name) -- display name
      printToAll("Type: " .. result.type) -- display type (Disipline / Talent)

      if result.type == "Discipline" then -- if type disipline add more info to output
            printToAll("Focus: " .. result.focus) --display focus

            for i, v in ipairs(result.entries) do -- loop through entries
                printToAll(v)
            end

            printToAll("==Modes==")

            for i, v in ipairs(result.modes) do
              printToAll("==")
              if v.submodes == nil then
                printToAll("Name: " .. v.name)
                printToAll("Min: " .. v.cost.min .. "\nMax: " .. v.cost.max)
                for q, c in ipairs(v.entries) do
                  printToAll(c)
                end
              else
                  for i, f in ipairs(v.submodes) do
                      printToAll("==")
                      printToAll("Name: " .. f.name)
                      printToAll("Min: " .. f.cost.min .. "\nMax: " .. f.cost.max)
                      for q, c in ipairs(f.entries) do
                        printToAll(c)
                      end
                  end
              end

            end
            printToAll("==Modes==")
      else
        for i, v in ipairs(result.entries) do
            printToAll(v)
        end
      end

      result = ""
      json = ""

      printToAll("--" .. player.steam_name .. " Requested psionic " .. str .. "--", player.color)
    end)
  end


  UI.setAttribute("psionicQuery" .. player.color, "text", "") --Put at bottom of function
end

function toTitleCase(phrase) -- used to normalise all the data ( proberally used lower case entries but here we are)
    local result = string.gsub( phrase, "(%a)([%w_']*)",
        function(first, rest)
            return first:upper() .. rest:lower()
        end
    )
    return result
end
